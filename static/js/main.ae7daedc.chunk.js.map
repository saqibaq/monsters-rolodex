{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","type","placeholder","onChange","handleChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAgBeA,MAbf,SAAeC,GACX,OACA,sBAAKC,UAAU,iBAAf,UACI,qBACIC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEP,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,WCCOC,MARf,SAAkBR,GACd,OAAQ,qBAAKC,UAAU,YAAf,SACHD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,U,MCQdM,MAZf,SAAmBX,GACf,OACA,uBACIC,UAAU,SACVW,KAAK,SACLC,YAAab,EAAMa,YACnBC,SAAUd,EAAMe,gBCmCTC,E,kDAtCb,aAAc,IAAD,8BACX,gBAcFD,aAAe,SAAAE,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALJ,E,qDASb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAO1C,WACE,MAAgCC,KAAKN,MAA9Bb,EAAP,EAAOA,SAAUU,EAAjB,EAAiBA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA1B,GACvC,OAAQA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAE1D,OACE,sBAAK9B,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CACEY,YAAY,kBACZE,aAAca,KAAKb,eAErB,cAAC,EAAD,CAAUN,SAAUoB,W,GAhCVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ae7daedc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.styles.css';\r\n\r\nfunction Card (props){\r\n    return( \r\n    <div className='card-container'>\r\n        <img\r\n            alt='monster'\r\n            src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n        />\r\n        <h2> {props.monster.name} </h2>\r\n        <p> {props.monster.email} </p>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport './card-list.styles.css';\r\nimport Card from '../card/card.component.jsx'\r\n\r\nfunction CardList(props) {\r\n    return (<div className=\"card-list\">\r\n        {props.monsters.map(monster => \r\n          <Card key={monster.id} monster={monster}/>\r\n        )}\r\n    </div>);\r\n}\r\n\r\nexport default CardList; ","import React from \"react\";\r\nimport './search-box.styles.css';\r\n\r\nfunction SearchBox(props){\r\n    return (\r\n    <input \r\n        className='search'\r\n        type='search' \r\n        placeholder={props.placeholder} \r\n        onChange={props.handleChange}\r\n\r\n    />\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\nimport './App.css';\nimport CardList from './components/card-list/card-list.component.jsx';\nimport SearchBox from './components/search-box/search-box.component';\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n\n  handleChange = e => {\n    this.setState({searchField: e.target.value});\n  }\n\n  render(){\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => {\n      return (monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    });\n    return (\n      <div className='App'>\n        <h1> Monster Rolodex </h1>\n        <SearchBox \n          placeholder='search monsters'\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}/>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}